<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
               "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
		<!ENTITY % darktable_dtd SYSTEM "../dtd/darktable.dtd">
		%darktable_dtd;
		]>

<chapter status="draft" id="lua_chapter">
	<chapterinfo>
		<keywordset>
			<keyword>scripting</keyword>
			<keyword>lua</keyword>
		</keywordset>
	</chapterinfo>
   <indexterm class="startofrange" id="ix.lua">
      <primary>Lua</primary>
   </indexterm>
   <indexterm>
      <primary>scripting</primary>
   </indexterm>
   <title>Scripting with Lua</title>
   <para>darktable comes with a versatile scripting interface for functionality enhancement.</para>
   <para>
	<screenshot>
		<screeninfo>Scipting with Lua</screeninfo>
		<graphic fileref="images/lua_view.png" scalefit="1" width="80%"></graphic>
	</screenshot>
   </para>

   <sect1 id="lua_usage"><title>Lua usage</title>
   <para>Lua can be used to define actions which darktable should perform whenever a specified event is triggered.
         One example might be calling an external application during file export in order to apply additional processing steps outside of darktable.
   </para>
   <para>darktable uses <ulink url="http://www.lua.org/"><emphasis>Lua</emphasis></ulink>, which is an
         independent project founded in 1993, providing a powerful, fast, lightweight, embeddable scripting 
         language. Lua is widely used by many open source applications, in commercial programs, and for games programming.
   </para>

   <para>darktable uses Lua version 5.2. Describing the principles and syntax of Lua is beyond the scope of this usermanual. For a detailed introduction 
         see the <ulink url="http://www.lua.org/manual/5.2/manual.html">Lua reference manual</ulink>.
   </para>

      <sect2 id="lua_a_note_about_beta">
         <title>A note about beta</title>
         <para>darktable's Lua API is still in a beta phase of development. This has multiple implications you should be aware of when writing Lua code:</para>
         <itemizedlist>
            <listitem>
               <para>The API might change without notice. In particular if we find out that the API is not practical.</para>
            </listitem>
            <listitem>
               <para>The API is incomplete. If you find something missing please report on IRC, in the mailing list, or open a feature request.</para>
            </listitem>
            <listitem>
               <para>darktable's Lua API is for lighttable functions. Our goal is to be able to do with Lua everything that can 
                     be done in the lighttable, but anything that can only be done in darkroom mode is off-limit.</para>
            </listitem>
         </itemizedlist>
      </sect2>

      <sect2 id="lua_basic_principles">
         <title>Basic principles</title>
         <para>At startup, darktable will automatically run two Lua scripts:</para>
         <itemizedlist>
            <listitem>
               <para>a script called <emphasis>luarc</emphasis> in <emphasis>$DARKTABLE/share/darktable</emphasis> 
               </para>
            </listitem>
            <listitem>
               <para>a script called <emphasis>luarc</emphasis> in the user's configuration directory</para>
            </listitem>
         </itemizedlist>
         <para>$DARKTABLE is used here to represent your system's darktable installation directory.</para>
         <para>This is the only time darktable will run Lua scripts by itself. Scripts can register callbacks to perform actions. See the corresponding section in <xref linkend="lua_api"/>.
         </para>
      </sect2>

      <sect2 id="lua_handling_scripts">
         <title>Handling scripts</title>
         <para>darktable will look for Lua modules in the system provided Lua path, but it will also look into the following places:</para>
         <itemizedlist>
            <listitem>
               <para>$(CONFIG_DIR)/lua/?.lua </para>
            </listitem>
            <listitem>
               <para>$(USER_DIR)/lua/?.lua </para>
            </listitem>
         </itemizedlist>
         <para>In other word, if you place a file called <emphasis>c.lua</emphasis> in the directory <emphasis>~/.config/darktable/lua/a/b/</emphasis> then <quote>@require "a.b.c"</quote>
          will find your script. The normal way to install a script is to place it in <emphasis>~/.config/darktable/lua/</emphasis> then add a <quote>require</quote> line to the file 
          <emphasis>~/.config/darktable/luarc</emphasis>.</para>
      </sect2>
      <sect2 id="Yielding from lua code">
	      <title> "Yielding from lua code"</title>

	      <para>Lua code in DT is allowed to yield (see the yield system call in the lua documentation)

Lua code that yields allows other lua callbacks to run, be aware of that

It is important to yield whenever you have some code that you expect to block to allow other lua code to run.

In particular you should always yield when calling an external program, particularly if it's a long, image processing task.

see LuaAPI for details about the syntax of the yield call in Darktable</para>
</sect2>
   </sect1>


   <sect1 status="draft" id="lua_api"><title>Lua API</title>
   <indexterm>
      <primary>Lua API</primary>
   </indexterm>
      <para>To access the darktable specific functions you must first load the darktable environment:</para>
<programlisting>darktable = require "darktable"
</programlisting>
      <para>All functions and data are accessed through this environment.</para>

      <sect2 id="lua_darktable_print_error">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.print_error</secondary>
         </indexterm>
         <title>darktable.print_error</title>
         <para>This function will print its parameter if the Lua logdomain is activated.</para>
         <para><emphasis>Syntax:</emphasis> darktable.print_error(string)</para>
         <variablelist>
            <varlistentry><term><emphasis>string</emphasis></term>
            <listitem>
               <para>
                  the string to print </para>
            </listitem>
            </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_darktable_database">
         <title>darktable.database</title>
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.database</secondary>
         </indexterm>
         <para>Allows to access the database of images, note that duplicate images (images with the same RAW but different XMP) will appear multiple times with different duplicate indexes</para>
         <para>Images are indexed as in a table and can be iterated with ipairs, but not directly added or deleted.</para>
         <para><emphasis>Syntax:</emphasis> darktable.database : table-like of images</para>
      </sect2>

      <sect2 id="lua_database_duplicate">
         <title>database.duplicate</title>
         <indexterm>
             <primary>Lua API</primary>
             <secondary>database.duplicate</secondary>
         </indexterm>
         <para>Creates a duplicate of an image and returns it.</para>
         <para><emphasis>Syntax:</emphasis> database.duplicate(image) : image</para>
            <variablelist>
             <varlistentry><term><emphasis>image</emphasis></term>
               <listitem>
                  <para>
                      the image to duplicate</para>
               </listitem>
             </varlistentry>
             <varlistentry><term>returns</term>
               <listitem>
                  <para>the new image object</para>
               </listitem>
             </varlistentry>
            </variablelist>
       </sect2>

       <sect2 id="lua_database_import">
            <indexterm>
               <primary>Lua API</primary>
               <secondary>database.import</secondary>
            </indexterm>
            <title>database.import</title>
            <para>Imports the corresponding directory or file.</para>
            <para><emphasis>Syntax:</emphasis> database.import(path_or_file) : object</para>
            <variablelist>
             <varlistentry><term><emphasis>path_or_file</emphasis></term>
               <listitem>
                  <para>
                      if it is a directory, returns the corresponding film object; if it is an image, returns the image object</para>
               </listitem>
             </varlistentry>
             <varlistentry><term>returns</term>
               <listitem>
                  <para>the film or image object</para>
               </listitem>
             </varlistentry>
            </variablelist>
            <para>NOTE: if the image are set to be imported recursively in preferences, only the toplevel film is returned (the one whose path was given as a parameter).</para>
            <para>NOTE2: if the parameter is a directory, the call is non-blocking. The film object will not have the newly imported images yet. Use a post-import-film 
                  filtering on that film to react when images are actually imported.</para>
      </sect2>

      <sect2 id="lua_darktable_films">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.films</secondary>
         </indexterm>
         <title>darktable.films</title>
         <para>Pseudo table containing objects describing the films.</para>
         <para><emphasis>Syntax:</emphasis> darktable.film : pseudo table</para>
      </sect2>

      <sect2 id="lua_darktable_preferences">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.preferences</secondary>
         </indexterm>
         <title>darktable.preferences</title>
         <para>Lua allows you do manipulate preferences. Lua has its own namespace for preferences and you can't access nor write normal darktable preferences.</para>
         <para>Preference-handling functions take a <emphasis>script</emphasis> parameter. This is a string used to avoid name collision in preferences (i.e namespace).
               Set it to something unique, usually the name of the script handling the preference.</para>
         <para>Preference-handling functions can't guess the type of a parameter. You must pass the type of the preference you are handling. Allowed values are <quote>string</quote>,
               <quote>bool</quote>, and <quote>integer</quote>.</para>

         <sect3 id="lua_darktable_preferences_register">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.preferences.register</secondary>
         </indexterm>
            <title>darktable.preferences.register</title>
            <para>Creates a new preference entry in the Lua tab of the preference screen. If this function is not called the preference can't be set by the 
                  user (you can still read and write invisible preferences).</para>
            <para><emphasis>Syntax:</emphasis> darktable.preferences.register(script, name, type, label, tooltip, default, [min, max])</para>
            <variablelist>
               <varlistentry><term><emphasis>script</emphasis></term>
                 <listitem>
                    <para>
                     invisible prefix to guarentee unicity of preferences</para>
                 </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>name</emphasis></term>
                  <listitem>
                    <para>
                     the name of the preference displayed in the preference screeen</para>
                  </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>type</emphasis></term>
                 <listitem>
                    <para>
                      the type of the preference</para>
                 </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>tooltip</emphasis></term>
                 <listitem>
                    <para>
                      the tooltip to display</para>
                 </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>default</emphasis></term>
                 <listitem>
                  <para>
                     default value </para>
                 </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>min</emphasis></term>
                 <listitem>
                  <para>
                     (int only) minimum value</para>
                 </listitem>
               </varlistentry>
               <varlistentry><term><emphasis>max</emphasis></term>
                 <listitem>
                  <para>
                     (int only) maximum value</para>
                 </listitem>
               </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_preferences_read">
            <indexterm>
               <primary>Lua API</primary>
               <secondary>darktable.preferences.read</secondary>
            </indexterm>
            <title>darktable.preferences.read</title>
            <para>Reads a value from a Lua preference.</para>
            <para><emphasis>Syntax:</emphasis> darktable.preferences.read(script, name, type) : value</para>
            <variablelist>
              <varlistentry><term><emphasis>script</emphasis></term>
               <listitem>
                  <para>
                      an invisible prefix</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                     name of the preference to read</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>type</emphasis></term>
               <listitem>
                  <para>
                      the type of the preference to read</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>returns</term>
               <listitem>
                  <para>
                      the value of the preference</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_preferences_write">
            <indexterm>
              <primary>Lua API</primary>
              <secondary>darktable.preferences.write</secondary>
            </indexterm>
            <title>darktable.preferences.write</title>
            <para>Writes a value to a Lua preference.</para>
            <para><emphasis>Syntax:</emphasis> darktable.preferences.write(script, name, type, value)</para>
            <variablelist>
              <varlistentry><term><emphasis>script</emphasis></term>
               <listitem>
                  <para>
                      an invisible prefix</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      name of the preference to set</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>type</emphasis></term>
               <listitem>
                  <para>
                      type of the preference to write</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>value</emphasis></term>
               <listitem>
                  <para>
                      value to set</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>
      </sect2>

      <sect2 id="lua_darktable_print">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.print</secondary>
         </indexterm>
         <title>darktable.print</title>
         <para>Will print a string to the darktable control log (the long overlayed window that appears over the main panel).</para>
         <para><emphasis>Syntax:</emphasis> darktable.print(string)</para>
         <variablelist>
           <varlistentry><term><emphasis>string</emphasis></term>
            <listitem>
               <para>
                   the string to display, should be a single line</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_darktable_configuration">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.configuration</secondary>
         </indexterm>
         <title>darktable.configuration</title>
         <para>This table regroups values that describe details of the configuration of darktable.</para>
         <sect3 id="lua_darktable_configuration_version">
            <title>darktable.configuration.version</title>
            <para>The version number of darktable.</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.version : string</para>
         </sect3>
         <sect3 id="lua_darktable_configuration_has_gui">
            <title>darktable.configuration.has_gui</title>
            <para>True if darktable has a gui (launched through the main darktable command, not darktable-cli.</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.has_gui : boolean</para>
         </sect3>
         <sect3 id="lua_darktable_configuration_verbose">
            <title>darktable.configuration.verbose</title>
            <para>True if the Lua logdomain is enabled.</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.verbose : boolean</para>
         </sect3>
         <sect3 id="lua_darktable_configuration_tmp_dir">
            <title>darktable.configuration.tmp_dir</title>
            <para>The name of the directory where darktable will store temporary files.</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.tmp_dir : string</para>
         </sect3>
         <sect3 id="lua_darktable_configuration_config_dir">
            <title>darktable.configuration.config_dir</title>
            <para>The name of the directory where darktable will find its global configuration objects (modules).</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.config_dir : string</para>
         </sect3>
         <sect3 id="lua_darktable_configuration_cache_dir">
            <title>darktable.configuration.cache_dir</title>
            <para>The name of the directory where darktable will store its mipmaps.</para>
            <para><emphasis>Syntax:</emphasis> darktable.configuration.cache_dir : string</para>
         </sect3>
      </sect2>

      <sect2 id="lua_darktable_gui">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.gui</secondary>
         </indexterm>
         <title>darktable.gui</title>
         <sect3 id="lua_darktable_gui_selection">
            <title>darktable.gui.selection</title>
            <para>Allows to change the set of selected images.</para>
            <para><emphasis>Syntax:</emphasis> darktable.gui.selection(selection)</para>
            <variablelist>
              <varlistentry><term><emphasis>selection</emphasis></term>
               <listitem>
                  <para>
                      a table of images will set the selected images; if <emphasis>nil</emphasis> is given instead of a table, will not touche the selection; if an empty 
                      table is given, will empty the selection</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>returns</term>
               <listitem>
                  <para>
                      a table containing the selection as it was before the function was called</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_gui_hovered">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.gui.hovered</secondary>
         </indexterm>
            <title>darktable.gui.hovered</title>
            <para>The image under the cursor or nil if no image is hovered.</para>
            <para><emphasis>Syntax:</emphasis> darktable.gui.hovered : image</para>
         </sect3>

         <sect3 id="lua_darktable_gui_action_images">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.gui.action_images</secondary>
         </indexterm>
            <title>darktable.gui.action_images</title>
            <para>A table of images on which the user expects us to act. It is based on both the hovered image and the selection and isconsistent with the way darktable works.</para>
            <para>It is recommanded to use this table to implement Lua actions rather than <emphasis>dt.gui.hovered</emphasis> or <emphasis>dt.gui.selected</emphasis>
                  to be consistant with darktable's gui.</para>
            <para><emphasis>Syntax:</emphasis> darktable.gui.action_images : table</para>
         </sect3>
      </sect2>


      <sect2 id="lua_darktable_modules">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.modules</secondary>
         </indexterm>
         <title>darktable.modules</title>
         <para>This table describe the different loadable modules of darktable.</para>
         <sect3 id="lua_darktable_modules_format">
            <title>darktable.modules.format</title>
            <para><emphasis>Syntax:</emphasis> darktable.modules.format.*</para>
            <para>Each entry is a function that will return a new object used to configure and describe the format.</para>
            <para>Each of them is initalized with values from the GUI.</para>
            <variablelist>
              <varlistentry><term><emphasis>plugin_name</emphasis></term>
               <listitem>
                  <para>
                      a unique name for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      a human readable name for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>extension</emphasis></term>
               <listitem>
                  <para>
                      the typical filename extension for that format</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>mime</emphasis></term>
               <listitem>
                  <para>
                      the mime type associated with the format</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>max_width</emphasis></term>
               <listitem>
                  <para>
                      the max width allowed for the format (0 = unlimited)</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>max_height</emphasis></term>
               <listitem>
                  <para>
                      the max height allowed for the format (0 = unlimited)</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>write_image(format, image, filename)</emphasis></term>
               <listitem>
                  <para>
                      exports image to filename using format; this is a blocking operation that will not return until the image 
                      is exported; return true on success, false on failure</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>other fields</term>
               <listitem>
                  <para>format dependant fields </para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_modules_storage">
            <indexterm>
              <primary>Lua API</primary>
              <secondary>darktable.modules.storage</secondary>
            </indexterm>
            <title>darktable.modules.storage</title>
            <para><emphasis>Syntax:</emphasis> darktable.modules.storage.*</para>
            <para>Each entry is a function that will return a new object used to configure and describe the storage.</para>
            <para>Each of them is initalized with values from the GUI.</para>
            <variablelist>
              <varlistentry><term><emphasis>plugin_name</emphasis></term>
               <listitem>
                  <para>
                      a unique name for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      a human readable name for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>width</emphasis></term>
               <listitem>
                  <para>
                      the currently selected width for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>height</emphasis></term>
               <listitem>
                  <para>
                      the currently selected height for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>recommanded_width</emphasis></term>
               <listitem>
                  <para>
                      the recommanded width for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>recommanded_height</emphasis></term>
               <listitem>
                  <para>
                      the recommanded height for the plugin</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>_supports_formats(self, format)</emphasis></term>
               <listitem>
                  <para>returns true if the storage support the corresponding fomat; format is a format object (see darktable.module.format.*)</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>other fields</term>
               <listitem>
                  <para>storage dependant fields</para>
               </listitem>
             </varlistentry>
            </variablelist>
         </sect3>
      </sect2>

      <sect2 id="lua_darktable_register_storage">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.register_storage</secondary>
         </indexterm>
         <title>darktable.register_storage</title>
         <para>Allows to implement a new storage that will be entirely implemented in Lua. The user provides a callback that will be called once 
               for each image, and a second callback that will be called when all images are processed.</para>
         <para><emphasis>Syntax:</emphasis> darktable.register_storage(plugin_name, name, [store], [finalize], [supported])</para>
         <variablelist>
           <varlistentry><term><emphasis>plugin_name</emphasis></term>
            <listitem>
               <para>
                   unique name for the plugin</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>name</emphasis></term>
            <listitem>
               <para>
                   human readable name for the plugin</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>store(storage, image, format, filename, num, total, high_quality, extra_data)</emphasis></term>
            <listitem>
               <para>
                   this function is called once for each exported image; store can not be called concurrently but the 
                   exporting pipe is run in the background for other images while Lua callbacks are called</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>finalize(storage, image_table, extra_data)</emphasis></term>
            <listitem>
               <para>
                   this function is called once all images are processed and all store calls are finished</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>supported(storage, format) : boolean</emphasis></term>
            <listitem>
               <para>
                   this function is called once for each format and must return a boolean; if the function isn't provided, all 
                   formats will be accepted; note that the format object has the current gui settings for that format, not 
                   the values that will be used at export time</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_darktable_tags">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.tags</secondary>
         </indexterm>
         <title>darktable.tags</title>
         <para>Allows access to all existing tags.</para>
         <para><emphasis>Syntax:</emphasis> darktable.tags : pseudo table</para>
         <variablelist>
           <varlistentry><term>#</term>
            <listitem>
               <para>each existing tag has a numeric entry in the tags table. use ipairs to iterate over them</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>create(name)</emphasis></term>
            <listitem>
               <para>
                   creates a new tag and return it; if the tag exists, return the existing tag</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>find(name)</emphasis></term>
            <listitem>
               <para>
                   returns the tag object or nil if the tag doesn't exist</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>delete(tag)</emphasis></term>
            <listitem>
               <para>
                   deletes the tag object, detaching it from all images</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>attach(tag,image)</emphasis></term>
            <listitem>
               <para>
                   (parameter order can be reversed) attach a tag to an image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>detach(tag, image)</emphasis></term>
            <listitem>
               <para>
                   (parameter order can be reversed) detach a tag from an image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>get_tags(image)</emphasis></term>
            <listitem>
               <para>
                   return a table with all tags attached to the image</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_darktable_register_event">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.register_event</secondary>
         </indexterm>
         <title>darktable.register_event</title>
         <para>This function register a callback to be called when a given event happened.</para>
         <para><emphasis>Syntax:</emphasis> darktable.register_event(event_type, callback, ...)</para>
         <variablelist>
           <varlistentry><term><emphasis>event_type</emphasis></term>
            <listitem>
               <para>
                   the event to register to</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>callback</emphasis></term>
            <listitem>
               <para>
                   the function to call on event</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>...</emphasis></term>

            <listitem>
               <para>
                   extra parameters, depend on the type of event</para>
            </listitem>
           </varlistentry>
         </variablelist>

         <sect3 id="lua_post_import_image">
            <title>post-import-image</title>
            <para>This event is triggered whenever a new image is imported into the database. This event can be registered multiple times, all callbacks will be called.</para>
            <para>The callback has the following signature:</para>
            <para>
               <emphasis>callback(event_name, image)</emphasis> 
            </para>
            <variablelist>
              <varlistentry><term><emphasis>event_name</emphasis></term>
               <listitem>
                  <para>
                      string, contains <quote>post-import-image</quote></para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>image</emphasis></term>
               <listitem>
                  <para>
                      image, the new image that has been added</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_post_import_film">
            <title>post-import-film</title>
            <para>This event is triggered when an film import is finished (all post-import-image have already been triggered). This event can be registered multiple times.</para>
            <para>The callback has the following signature:</para>
            <para>
               <emphasis>callback(event_name, film)</emphasis>
            </para>
            <variablelist>
              <varlistentry><term><emphasis>event_name</emphasis></term>
               <listitem>
                  <para>
                      string, contains <quote>post-import-film</quote></para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>film</emphasis></term>
               <listitem>
                  <para>
                      film, the new film that has been added</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_shortcut">
            <title>shortcut</title>
            <para>This event registers a new keyboard shortcut. The shortcut isn't bound to any key until the users does so in the 
                  preference panel.</para>
            <para>The event is triggered whenever the shortcut is triggered.</para>
            <para>This event has one extra parameter at registration time.</para>
            <variablelist>
              <varlistentry><term><emphasis>shortcut</emphasis></term>
               <listitem>
                  <para>
                      string, the string that will be displayed on the shortcut preference panel describing the shortcut</para>
               </listitem>
              </varlistentry>
            </variablelist>
            <para>This event can only be registered once per value of <emphasis>shortcut</emphasis>.
            </para>
            <para>The callback has the following signature:</para>
            <para>
               <emphasis>callback(event_name, shortcut)</emphasis> 
            </para>
            <variablelist>
              <varlistentry><term><emphasis>event_name</emphasis></term>
               <listitem>
                  <para>
                      string, contains <quote>shortcut</quote></para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>shortcut</emphasis></term>
               <listitem>
                  <para>
                      string, the shorcut name that was passed at registration time</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_intermediate_export_image">
            <title>intermediate-export-image</title>
            <para>This event is called each time an image is exported, once for each image after the image has been processed to an 
                  image format but before the storage hasmoved the image to its final destination.</para>
            <para>This event has no extra parameter at registration time.</para>
            <para>This event can be registered multiple times, each callback will be called independently.</para>
            <para>The callback has the following signature:</para>
            <para>
               <emphasis>callback(event_name,image, filename)</emphasis> 
            </para>
            <para>Note: this event isn't triggered by the <emphasis>copy</emphasis> format.</para>
            <variablelist>
              <varlistentry><term><emphasis>event_name</emphasis></term>
               <listitem>
                  <para>
                      string, contains <quote>intermediate-export-image</quote></para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>image</emphasis></term>
               <listitem>
                  <para>
                      an image object, the image object that was used for the export</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>filename</emphasis></term>
               <listitem>
                  <para>
                      a file in the temporary directory where the image was stored</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>
      </sect2>

      <sect2 id="lua_darktable_styles">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.styles</secondary>
         </indexterm>
         <title>darktable.styles</title>
         <para>Allow you to access the styles. Styles are indexed by numbers.</para>
         <para><emphasis>Syntax:</emphasis> darktable.styles : pseudo table</para>
         <sect3 id="lua_darktable_styles_create">
            <title>darktable.styles.create</title>
            <para>Create a new style based on an image.</para>
            <para><emphasis>Syntax:</emphasis> darktable.styles.create(image, name, [description]) : style</para>
            <variablelist>
              <varlistentry><term><emphasis>image</emphasis></term>
               <listitem>
                  <para>
                      the image to create the style from</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      the name to give to the new style</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>description</emphasis></term>
               <listitem>
                  <para>
                      the description of the new style</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>returns</term>
               <listitem>
                  <para>a new style object</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_styles_delete">
            <indexterm>
              <primary>Lua API</primary>
              <secondary>darktable.styles.delete</secondary>
            </indexterm>
            <title>darktable.styles.delete</title>
            <para>Deletes an existing style.</para>
            <para><emphasis>Syntax:</emphasis> darktable.styles.delete(style)</para>
            <variablelist>
              <varlistentry><term><emphasis>style</emphasis></term>
               <listitem>
                  <para>
                      the style to delete</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_styles_duplicate">
            <indexterm>
               <primary>Lua API</primary>
               <secondary>darktable.styles.duplicate</secondary>
            </indexterm>
            <title>darktable.styles.duplicate</title>
            <para>Create a new style based on an existing style.</para>
            <para><emphasis>Syntax:</emphasis> darktable.styles.delete(style) : style</para>
            <variablelist>
              <varlistentry><term><emphasis>style</emphasis></term>
               <listitem>
                  <para>
                      the style to base the new style on</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      the new style's name</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>description</emphasis></term>
               <listitem>
                  <para>
                      the new style's description</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>returns</term>
               <listitem>
                  <para>the new style object</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>

         <sect3 id="lua_darktable_styles_apply">
            <indexterm>
               <primary>Lua API</primary>
               <secondary>darktable.styles.apply</secondary>
            </indexterm>
            <title>darktable.styles.apply</title>
            <para>Apply a style to an image. Order of parameters can be inverted.</para>
            <para><emphasis>Syntax:</emphasis> darktable.styles.apply(style, image)</para>
            <variablelist>
              <varlistentry><term><emphasis>style</emphasis></term>
               <listitem>
                  <para>
                      the style to use</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>image</emphasis></term>
               <listitem>
                  <para>
                      the image to apply the style to</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>
      </sect2>

      <sect2 id="lua_darktable_debug">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>darktable.debug</secondary>
         </indexterm>
         <title>darktable.debug</title>
         <para>This section must be activated separately by calling:</para>
<programlisting>require "darktable.debug"
</programlisting>
         <sect3 id="lua_darktable_dump">
            <title>darktable.dump</title>
            <para>Will return a string describing everything Lua knows about object, used to know what an object is.</para>
            <para>This function is recursion-safe and can be used to dump _<emphasis>G</emphasis> if needed.</para>
            <para><emphasis>Syntax:</emphasis> darktable.dump(object, name) : string</para>
            <variablelist>
              <varlistentry><term><emphasis>object</emphasis></term>
               <listitem>
                  <para>
                      any Lua object</para>
               </listitem>
              </varlistentry>
              <varlistentry><term><emphasis>name</emphasis></term>
               <listitem>
                  <para>
                      a name to give to the topmost object</para>
               </listitem>
              </varlistentry>
              <varlistentry><term>returns</term>
               <listitem>
                  <para>a string describing the object</para>
               </listitem>
              </varlistentry>
            </variablelist>
         </sect3>


         <sect3 id="lua_darktable_debug_debug">
             <indexterm>
                <primary>Lua API</primary>
                <secondary>darktable.debug.debug</secondary>
            </indexterm>
            <title>darktable.debug.debug</title>
            <para>Initialized to false, set it to true to also dump information about metatables.</para>
            <para><emphasis>Syntax:</emphasis> darktable.debug.debug : boolean</para>
         </sect3>

         <sect3 id="lua_darktable_debug_type">
            <indexterm>
               <primary>Lua API</primary>
               <secondary>darktable.debug.type</secondary>
            </indexterm>
            <title>darktable.debug.type</title>
            <para>Similar to the system function <emphasis>type</emphasis> but will report the correct type of darktable 
                  specific objects instead of <emphasis>userdata</emphasis>.
            </para>
            <para><emphasis>Syntax:</emphasis> darktable.debug.type(object) : string</para>
         </sect3>
      </sect2>

      <sect2 id="lua_film_type">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>film type</secondary>
         </indexterm>
         <title>film type</title>
         <para>Film object, represents an imported directory on the disk.</para>
         <variablelist>
           <varlistentry><term><emphasis>id</emphasis></term>
            <listitem>
               <para>
                   a unique numeric id identifying the film (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>path</emphasis></term>
            <listitem>
               <para>
                   the path of the directory this film contains</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_image_type">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>image type</secondary>
         </indexterm>
         <title>image type</title>
         <para>Image objects represent an image in the database. This is slightly different from a file on disk since a file 
               can have multiple developements.</para>
         <para>Note that this is the real image object, changing the value of a field will immediately change it in darktable 
               and will be reflected on any copy of that image object you may have kept.</para>
         <variablelist>
           <varlistentry><term> <emphasis>id</emphasis></term>
            <listitem>
               <para>
                   number, a unique numeric id identifying the image in the database (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>path</emphasis></term>
            <listitem>
               <para>
                   string, the name of the directory containing the image (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>filename</emphasis></term>
            <listitem>
               <para>
                   string, the filename of the image (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>duplicate_index</emphasis></term>
            <listitem>
               <para>
                   number, if there are multiple images based on a same file, each will have a unique number, starting from 0 (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>publisher</emphasis></term>
            <listitem>
               <para>
                   string, the publisher field of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>title</emphasis></term>
            <listitem>
               <para>
                   string, the title field of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>creator</emphasis></term>
            <listitem>
               <para>
                   string, the creator field of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>rights</emphasis></term>
            <listitem>
               <para>
                   string, the rights field of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>description</emphasis></term>
            <listitem>
               <para>
                   string, the description field for the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>film</emphasis></term>
            <listitem>
               <para>
                   dt_film_t, the film object containing the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_maker</emphasis></term>
            <listitem>
               <para>
                   string, the maker exif data</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_model</emphasis></term>
            <listitem>
               <para>
                   string, the camera model used</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_lens</emphasis></term>
            <listitem>
               <para>
                   string, the id string of the lens used</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_aperture</emphasis></term>
            <listitem>
               <para>
                   number, the aperture saved in the exif data</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_exposure</emphasis></term>
            <listitem>
               <para>
                   number, the exposure time of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_focal_length</emphasis></term>
            <listitem>
               <para>
                   number, the focal lens of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_iso</emphasis></term>
            <listitem>
               <para>
                   number, the iso used on the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_datetime_taken</emphasis></term>
            <listitem>
               <para>
                   string, the date and time of the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_focus_distance</emphasis></term>
            <listitem>
               <para>
                   number, the distance of the subject</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>exif_crop</emphasis></term>
            <listitem>
               <para>
                   number, the exif crop data</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>latitude</emphasis></term>
            <listitem>
               <para>
                   number, GPS data for the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>longitude</emphasis></term>
            <listitem>
               <para>
                   number, the GPS data for the image</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>is_raw</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image is a RAW file (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>is_ldr</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image is ldr (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>is_hdr</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image is a hdr image (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>width</emphasis></term>
            <listitem>
               <para>
                   number, the width of the image (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>height</emphasis></term>
            <listitem>
               <para>
                   number, the height of the image (read-only)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>rating</emphasis></term>
            <listitem>
               <para>
                  number, the rating of the image (-1 for rejected)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>red</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image has the corresponding label</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>blue</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image has the corresponding label</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>green</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image has the corresponding label</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>yellow</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image has the corresponding label</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>purple</emphasis></term>
            <listitem>
               <para>
                   boolean, true if the image has the corresponding label</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>group_with(image, [image])</emphasis></term>
            <listitem>
               <para>
                   puts the first image in the same group as the second image; if no second image is provided, the image 
                   will be in its own group</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>make_group_leader(image)</emphasis></term>
            <listitem>
               <para>
                   makes the image the leader of its group</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>get_group_members</emphasis></term>
            <listitem>
               <para>
                  returns a table containing all images of the group; the group leader is both at a numeric key and at the <quote>leader</quote>
                  special key (so you probably want to use ipairs to iterate through that table)</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>attach_tag(image, tag)</emphasis></term>
            <listitem>
               <para>
                   see darktable.tags.attach</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>detach_tag(image, tag)</emphasis></term>
            <listitem>
               <para>
                   see darktable.tags.detach</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>get_tags(image)</emphasis></term>
            <listitem>
               <para>
                   see darktable.tags.get_tags</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>create_style(image, name, [description])</emphasis></term>
            <listitem>
               <para>
                   see darktable.styles.create</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>apply_style(image, style)</emphasis></term>
            <listitem>
               <para>
                   see darktable.styles.apply</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_style_type">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>style type</secondary>
         </indexterm>
         <title>style type</title>
         <para>The style object allows you to read and manipulate styles.</para>
         <variablelist>
           <varlistentry><term><emphasis>name</emphasis></term>
            <listitem>
               <para>
                   the name of the style</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>description</emphasis></term>
            <listitem>
               <para>
                   the description of the style</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>duplicate(style,name, [description])</emphasis></term>
            <listitem>
               <para>
                   see darktable.styles.duplicate</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>apply(style, image)</emphasis></term>
            <listitem>
               <para>
                   see darktable.styles.apply</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>delete(style)</emphasis></term>
            <listitem>
               <para>
                   see darktable.styles.delete</para>
            </listitem>
           </varlistentry>
           <varlistentry><term>number</term>
            <listitem>
               <para>style elements, each have a name and an index</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>

      <sect2 id="lua_tag_type">
         <indexterm>
             <primary>Lua API</primary>
             <secondary>tag type</secondary>
         </indexterm>
         <title>tag type</title>
         <para>Tag object represents a tag in the database. They can be compared, they can be transformed into text with <quote>tostring</quote>.</para>
         <variablelist>
           <varlistentry><term><emphasis>name</emphasis></term>
            <listitem>
               <para>
                   string, the name of the tag</para>
            </listitem>
           </varlistentry>
           <varlistentry><term>_#_</term>
            <listitem>
               <para>each image attached to the tag has a numeric entry; iterate over them with ipairs</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>delete(tag)</emphasis></term>
            <listitem>
               <para>
                   deletes the tag</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>attach(tag, image)</emphasis></term>
            <listitem>
               <para>
                   see darktable.tags.attach</para>
            </listitem>
           </varlistentry>
           <varlistentry><term><emphasis>detach(tag, image)</emphasis></term>
            <listitem>
               <para>
                   see darktable.tags.detach</para>
            </listitem>
           </varlistentry>
         </variablelist>
      </sect2>
   </sect1>


   <sect1 status="draft" id="lua_scripts">
      <title>Lua scripts</title>
      <para>This section presents a list of scripts provided by beta testers of the Lua API. There is no guarentee whatsoever that they will work as the API is still in beta and might have changed since the script was uploaded.</para>
      <sect2 id="mosaic_lua">
         <title>Simple mosaic script</title>
         
         <itemizedlist>
            <listitem>
               <para>author: boucman </para>
            </listitem>
            <listitem>
               <para>tested with: 1.3+265~gd7f3d1a </para>
            </listitem>
            <listitem>
               <para>download: <ulink url="http://www.darktable.org/redmine/attachments/download/572/mosaic.lua">mosaic.lua</ulink></para>
            </listitem>
         </itemizedlist>
<programlisting>dt = require "darktable"
dt.register_storage("module_stitcher","mosaic generator",nil,
   function(storage,image_table)
	dt.print_error("Will try to stitch now")
	command = "gm convert "
	for _,v in pairs(image_table) do
		command = command..v.." "
	end
	command = command.."-append -resize 15% "
                           ..dt.configuration.tmp_dir.."/tmp.png"
	dt.print_error("this is the command: "..command)
	os.execute(command)

	dt.print("Stitching saved to "..dt.configuration.tmp_dir
                           .."/tmp.png")
    end
)
</programlisting>
         <para>This script is an example of storage implemented in Lua. This is not complete nor polished but it shows how to implement a storage module in Lua.</para>
         <para>The script must be saved in <emphasis>~/.config/darktable/lua/</emphasis> (the directory might not exist).</para>
         <para>Add the following line in the file <emphasis>~/.config/darktable/luarc</emphasis> (again, the file might not exist):</para>
<programlisting>require "mosaic"
</programlisting>
         <para>A new entry <emphasis>mosaic generator</emphasis> will be added to the storage list. Using it will create a mosaic of selected images in a temporary directory.</para>
         <para>Thanks to hal_from_2001 for the idea an the original implementation.</para>
      </sect2>

      <sect2 id="save_selection_lua">
         <title>Selection manipulation shortcuts</title>
         
         <itemizedlist>
            <listitem>
               <para>author: boucman </para>
            </listitem>
            <listitem>
               <para>tested with: 1.3+265~gd7f3d1a </para>
            </listitem>
            <listitem>
               <para>download: <ulink url="http://www.darktable.org/redmine/attachments/download/636/save_selection.lua">save_selection.lua</ulink></para>
            </listitem>
         </itemizedlist>
<programlisting>dt = require "darktable"
local buffer_count = 5

for i=1,buffer_count do
	local saved_selection
	dt.register_event("shortcut",function()
		saved_selection = dt.gui.selection()
	end,"save to buffer "..i)
	dt.register_event("shortcut",function()
		dt.gui.selection(saved_selection)
	end,"restore from buffer "..i)
end

local bounce_buffer = {}
dt.register_event("shortcut",function()
	bounce_buffer = dt.gui.selection(bounce_buffer)
end,"switch selection with temporary buffer")
</programlisting>
         <para>This script will add two new shortcuts <quote>save to buffer</quote> and <quote>restore from buffer</quote> to help manipulate selections.</para>
         <para>Save this script in <emphasis>~/.config/darktable/lua/</emphasis> (the directory might need to be created) and
               add the following line in the file <emphasis>~/.config/darktable/luarc</emphasis> (the file might need to be created):</para>
<programlisting>require "save_selection"
</programlisting>
         <para>Now these new options will appear under global-&gt;lua. and allow you to save and restore the current selection to/from five different save bufffers.
               The third shortcut <quote>switch selection with temporary buffer</quote> exchanges the current selection with the content of a fast buffer.</para>
      </sect2>
   </sect1>


   <sect1 status="draft" id="lua_debugging"><title>Lua debugging</title>
         <sect2><title>Enable error logging</title>
            <para>Start darktable with the command line <quote>darktable -d lua</quote> to enable Lua error logging.</para>
            <itemizedlist>
               <listitem>
                  <para>messages printed from Lua using <emphasis>darktable.print_error</emphasis> will be visible on the standard out.</para>
               </listitem>
               <listitem>
                  <para>for fatal Lua errors the whole traceback (and not just the error message) will be printed to the console.</para>
               </listitem>
            </itemizedlist>
         </sect2>

         <sect2 id="lua_inspecting_internal_objects">
            <title>Inspecting internal objects</title>
            <para>darktable provides some debugging helpers which can be called from Lua as per the following example:</para>
<programlisting>dt_debug = require "darktable.debug"
dt_debug.debug.debug = true

print(dt_debug.dump(_G,"Global environement")
</programlisting>
            <para>The main function provided is <emphasis>darktable.debug.dump(object,name)</emphasis>. This function returns a string that describes an object. The object can be anything and 
                  this function will use its knowledge of the darktable API to be smart about the type of objects.</para>
            <para>The boolean variable <emphasis>darktable.debug.debug</emphasis> is initialized to false. When this variable is set <quote>true</quote>, <emphasis>dt_debug.dump</emphasis>
                  will also dump metatables for objects. You usually only want to see those when debugging the internals of darktable's Lua API.</para>
         </sect2>

         <sect2 id="lua_debugging_unprotected_calls">
            <title>Debugging unprotected calls</title>
            <para>When experimenting with Lua, darktable might crash with the following message:</para>
<programlisting>PANIC: unprotected error in call to lua API (some message here)
</programlisting>
            <para>This is always a bug in darktable's Lua API. Please open a bug report and attach the script that caused the crash.</para>
         </sect2>
   </sect1>
   <indexterm class="endofrange" startref="ix.lua"/>
</chapter>


